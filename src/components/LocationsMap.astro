---
// Props opcjonalnie (na razie stałe współrzędne)
const locations = [
  {
    id: 'siedziba',
    name: 'Siedziba Towarzystwa',
    coords: [53.140474, 18.018722],
    address: 'ul. Gdańska 188, Bydgoszcz'
  },
  {
    id: 'zajecia',
    name: 'Miejsce zajęć (Jarużyn)',
    coords: [53.202965, 18.131769],
    address: 'Jarużyn, ul. Kolonia 33'
  }
];
---

<div class="map-wrapper" id="offer-map" data-locations={JSON.stringify(locations)}>
  <p class="map-heading"><strong>Mapa lokalizacji</strong> (Siedziba + Miejsce zajęć)</p>
  <div id="map-canvas" class="pre-canvas" aria-label="Mapa z dwiema lokalizacjami"></div>
  <noscript>
    <p>Mapa wymaga włączonego JavaScript. Lokalizacje: Siedziba: ul. Gdańska 188, Bydgoszcz. Miejsce zajęć: Jarużyn, ul. Kolonia 33.</p>
  </noscript>
</div>

<style>
.map-wrapper { background:#f1f5f9; border:1px solid #e2e8f0; border-radius:16px; padding:1.25rem 1.25rem 1.5rem; text-align:center; position:relative; max-width:820px; margin:2rem auto; }
.map-heading { margin:0 0 .75rem; color:#2c5530; font-size:1rem; }
#map-canvas { width:100%; height:480px; border-radius:16px; box-shadow:0 2px 6px rgba(0,0,0,0.08); }
@media (max-width: 640px){ #map-canvas { height:360px; } }
</style>

<script>
  // @ts-nocheck
  /** @typedef {{ id: string; name: string; coords: [number, number]; address: string }} Location */
  document.addEventListener('DOMContentLoaded', () => {
    const wrapper = document.getElementById('offer-map');
    if(!wrapper) return;
    const init = async () => {
      try {
        if(!document.querySelector('link[data-leaflet-css]')) {
          const linkCss = document.createElement('link');
          linkCss.rel='stylesheet';
          linkCss.dataset.leafletCss = 'true';
          linkCss.href='https://unpkg.com/leaflet@1.9.4/dist/leaflet.css';
          document.head.appendChild(linkCss);
        }
        if(!(window).L) {
          await new Promise((resolve, reject) => {
            const s = document.createElement('script');
            s.src = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js';
            s.async = true;
            s.onload = resolve;
            s.onerror = reject;
            document.head.appendChild(s);
          });
        }
        const L = (window).L;
        const data = JSON.parse(wrapper.dataset.locations || '[]');
        const mapDiv = document.getElementById('map-canvas');
        const map = L.map(mapDiv, { scrollWheelZoom:false, attributionControl:true });
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          maxZoom: 19,
          attribution: '&copy; OpenStreetMap contributors'
        }).addTo(map);
        const group = L.featureGroup();
        data.forEach((loc) => {
          const marker = L.marker(loc.coords, { title: loc.name });
          marker.bindPopup(`<strong>${loc.name}</strong><br>${loc.address}`);
          marker.addTo(group);
        });
        group.addTo(map);
        map.fitBounds(group.getBounds().pad(0.25));
        // Zmniejsz zoom o jeden poziom jeśli to nie wyjdzie poza minimalny
        setTimeout(() => {
          const current = map.getZoom();
            if(typeof current === 'number') {
              map.setZoom(current - 1);
            }
        }, 50);
      } catch(err) {
        console.error('Błąd ładowania mapy', err);
      }
    };
    // Eager load (można dodać IntersectionObserver jeśli chcesz lazy-in-view)
    init();
  });
</script>
